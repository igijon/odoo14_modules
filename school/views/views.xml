<odoo>
  <data>
    <!-- explicit list view definition -->
    <!-- Vistas tree: son las más fáciles de hacer. Record indica que se almacena algo en BDD, concretamente una vista porque se almacena en el modelo ir.ui.view
    Las vistas para funcionar necesitan saber:
    - Un no mbre que debería ser único
    - El modelo sobre el que se implementa la vista
    - Un archivo xml que indicará el tipo de vista. En este caso sólo tenemos especificado algo para la vista tree,
    concretamente los campos que se van a mostrar en dicha vista. El resto de tipos de vistas lo tomará por defecto.
    Todo esto después es interpretado por la aplicación cliente, en este caso JS de Odoo y será convertido en HTML. 
    
    No se hace en el backend en el servidor, sino en el frontend.
    
    Además de lo que conocemos podemos cambiar colores de algunas de las filas en función de algún criterio
    
    Hay distintos tipos de decoración aplicables que podéis consultar en la documentación, por ejemplo:

    https://www.iwesabe.com/blog/how-to-add-colors-to-tree-view-in-odoo
    
    -->
    <record model="ir.ui.view" id="school.student_list">
      <field name="name">school.student list</field>
      <field name="model">school.student</field>
      <field name="arch" type="xml">
        <tree decoration-info="birth_year>2000" decoration-warning="birth_year&lt;1980"> 
          <field name="name"/>
          <field name="password" />
          <field name="birth_year" sum="Total"/> <!-- Tengo la posibilidad de añadir totales aunque
          no tenga mucho sentido aquí-->
        </tree>
      </field>
    </record>

    <record model="ir.ui.view" id="school.teacher_list">
      <field name="name">school.teacher list</field>
      <field name="model">school.teacher</field>
      <field name="arch" type="xml">
        <tree> 
          <field name="name"/>
          <field name="topic" />
          <field name="phone" /> 
        </tree>
      </field>
    </record>

    <!--Vista form creada por nosotros-->
    <record model="ir.ui.view" id="school.student_form">
      <field name="name">school.student form</field>
      <field name="model">school.student</field>
      <field name="arch" type="xml">
        <form>
          <header>

            <field name="state" widget="statusbar"></field>
          </header>
          <sheet> 
            <div class="oe_button_box">
            <!--Como hemos visto en views.xml también podemos añadir etiquetas propias de html, además de las propias de xml-->
              <button type="object" class="oe_stat_button" icon="fa-pencil-square-o"  name="regenerate_password">
                <div class="o_form_field o_stat_info">
                  <span class="o_stat_value">
                    <field name="password" string="Password"/>
                    <!-- En el ejemplo va a mostrar sólo una parte porque tiene unas dimensiones concretas
                    -->
                  </span>
                  <span class="o_stat_text">Password</span>
                </div>
              </button>
            </div>
            <field name="photo" widget="image" class="oe_avatar"/>
            <group>
              <group>
                <separator string="Personal Data"></separator>
                <field name="name"/>
                <field name="birth_year"/> 
                <field name="password"/> 
                <field name="dni" />
                <field name="description" />
              </group>
              <group> <!-- Quito el estado porque sólo era un ejemplo, puedo añadir botones que cambian de estado...-->
                <separator string="Inscription Data"></separator>
                <field name="inscription_date" />
                <field name="last_login" />
                <field name="is_student" />
                <field name="classroom" 
                       attrs="{'invisible':[('is_student','=',False)],
                               'required':[('is_student','=',True)]}"/>
                <!--Podemos añadir más atributos condicionales y también por ejemplo que sean de solo lectura en casos concretos...-->
                <field name="level" /> <!--Si pongo el filtro en la vista tarda más en aplicarse que si lo pongo en el modelo, queda a decisión del programador. Uno es suficiente-->
              </group>
            </group>
            <notebook>
              <page string="Teachers">
                <field name="teachers">
                  <!-- Si en la vista del estudiante no queremos que aparezca el campo
                  phone del profesor, pero en la vista tree del profesor sí aparecerá-->
                  <tree>
                    <field name="name"/>
                    <field name="topic"/>
                  </tree>
                </field>
              </page>
            </notebook>
          </sheet>
        </form>
      </field>
    </record>

    <!--Esta vista tiene la particularidad de añadir código qweb
    Lo primero que tiene es una referencia a id que no se va a mostrar en el card pero que es necesario para luego acceder
    a él para mostrar la foto
    
    A continuación metemos templates, dentro indicará lo que se va a mostrar.
    El card está indicado mediante t
    
    Dentro de cada card vamos a tener por un lado la imagen, que a su vez va a ser un enlace que si se pulsa se mostrará el formulario 
    asociado al estudiante. Para que cargue la imagen debemos llamar a la función kanban_image indicando el modelo, el campo a cargar y
    el id del estudiante al que nos estamos refiriendo, por eso fuera de templates tenemos el campo id referenciado para poder acceder a él
    
    Depués tenemos otro div con el nombre del estudiante que a su vez es un enlace, y que si lo pulsamos abrimos el formulario en el modo 
    de edición
    
    Finalmente dentro de ese div tenemos una lista con la clase a la que pertenece el estudiante
    
    Por CSS se pueden modificar los estilos
    
    En la documentación de Odoo podemos ver todo lo que se podría hacer, qweb tiene muchísimas posibilidades-->
    <record id="school.student_kanban" model="ir.ui.view">
      <field name="name">school.student kanban</field>
      <field name="model">school.student</field>
      <field name="arch" type="xml">
        <kanban>
          <field name="id"></field>
          <templates>
            <t t-name="kanban-box">
              <div t-attf-class="oe_kanban_global_click o_kanban_record_has_image_fill">
                <a type="open">
                  <img width="150" style="padding:5px" class="oe_kanban_image"
                    t-att-src="kanban_image('school.student', 'photo', record.id.raw_value)"
                    alt="student image"/>
                </a>
                <div t-attf-class="oe_kanban_content">
                  <h4>
                    <a type="edit">
                      <field name="name"></field>
                    </a>
                  </h4>
                  <ul>
                    <li>Classroom:
                      <field name="classroom"></field>
                    </li>
                  </ul>
                </div>
              </div>
            </t>
          </templates>
        </kanban>
      </field>
    </record>


    <!-- actions opening views on models -->
    <!--Activamos la vista kanban
    ESta vista muestra un card con inforamción básica. Esta vista para desarrollo es la más complicada y la sintaxis es cercana al HTML, 
    concretamente al qweb que vimos para hacer plantillas.
    Habilitando la vista kanban aparece un card con los nombres y se habilita el botón a la derecha-->
    <record model="ir.actions.act_window" id="school.action_student_window">
      <field name="name">school student window</field>
      <field name="res_model">school.student</field>
      <field name="view_mode">tree,form,kanban</field>
    </record>


    <record model="ir.actions.act_window" id="school.action_classroom_window">
      <field name="name">school classroom window</field>
      <field name="res_model">school.classroom</field>
      <field name="view_mode">tree,form</field>
    </record>

    <record model="ir.actions.act_window" id="school.action_teacher_window">
      <field name="name">school teacher window</field>
      <field name="res_model">school.teacher</field>
      <field name="view_mode">tree,form</field>
    </record>
    <!-- server action to the one above -->
<!--
    <record model="ir.actions.server" id="school.action_server">
      <field name="name">school server</field>
      <field name="model_id" ref="model_school_school"/>
      <field name="state">code</field>
      <field name="code">
        action = {
          "type": "ir.actions.act_window",
          "view_mode": "tree,form",
          "res_model": model._name,
        }
      </field>
    </record>
-->

    <!-- Top menu item -->
<!--
    <menuitem name="school" id="school.menu_root"/>
-->
    <!-- menu categories -->
<!--
    <menuitem name="Menu 1" id="school.menu_1" parent="school.menu_root"/>
    <menuitem name="Menu 2" id="school.menu_2" parent="school.menu_root"/>
-->
    <!-- actions -->
    <!--Top menú item-->
    
    <menuitem name="School" id="school.menu_root"/>
 
    <!-- Menú categories-->
    <menuitem name="Management" id="school.menu_1" parent="school.menu_root"/>

    <!-- actions -->
    <menuitem name="Students" id="school.menu_student_list" parent="school.menu_1"
      action="school.action_student_window"/>

    <menuitem name="Classrooms" id="school.menu_classroom_list" parent="school.menu_1"
      action="school.action_classroom_window"/>

    <menuitem name="Teachers" id="school.menu_teacher_list" parent="school.menu_1"
      action="school.action_teacher_window"/>
  </data>
</odoo>